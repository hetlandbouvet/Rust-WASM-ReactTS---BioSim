{"message":"unused import: `rand::rngs::ThreadRng`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/landscape.rs","byte_start":49,"byte_end":70,"line_start":4,"line_end":4,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use rand::rngs::ThreadRng;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/landscape.rs","byte_start":45,"byte_end":71,"line_start":4,"line_end":4,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use rand::rngs::ThreadRng;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rand::rngs::ThreadRng`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/landscape.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand::rngs::ThreadRng;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `std::iter::Map`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/island.rs","byte_start":21,"byte_end":35,"line_start":2,"line_end":2,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use std::iter::Map;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/island.rs","byte_start":17,"byte_end":36,"line_start":2,"line_end":2,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"use std::iter::Map;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::iter::Map`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/island.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::iter::Map;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `rand::rngs::ThreadRng`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/island.rs","byte_start":42,"byte_end":63,"line_start":4,"line_end":4,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use rand::rngs::ThreadRng;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/island.rs","byte_start":38,"byte_end":64,"line_start":4,"line_end":4,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use rand::rngs::ThreadRng;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rand::rngs::ThreadRng`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/island.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand::rngs::ThreadRng;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::fmt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/island.rs","byte_start":131,"byte_end":139,"line_start":9,"line_end":9,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"use std::fmt;","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/island.rs","byte_start":127,"byte_end":140,"line_start":9,"line_end":9,"column_start":1,"column_end":14,"is_primary":true,"text":[{"text":"use std::fmt;","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::fmt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/island.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fmt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `rand::rngs::ThreadRng`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/biosim.rs","byte_start":4,"byte_end":25,"line_start":1,"line_end":1,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use rand::rngs::ThreadRng;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/biosim.rs","byte_start":0,"byte_end":26,"line_start":1,"line_end":1,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use rand::rngs::ThreadRng;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rand::rngs::ThreadRng`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/biosim.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand::rngs::ThreadRng;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `landscape::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":86,"byte_end":98,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"use landscape::*;","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":82,"byte_end":99,"line_start":8,"line_end":8,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"use landscape::*;","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `landscape::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse landscape::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `cmp`, `fmt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":125,"byte_end":128,"line_start":10,"line_end":10,"column_start":11,"column_end":14,"is_primary":true,"text":[{"text":"use std::{fmt, cmp};","highlight_start":11,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":130,"byte_end":133,"line_start":10,"line_end":10,"column_start":16,"column_end":19,"is_primary":true,"text":[{"text":"use std::{fmt, cmp};","highlight_start":16,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":115,"byte_end":135,"line_start":10,"line_end":10,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"use std::{fmt, cmp};","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `cmp`, `fmt`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{fmt, cmp};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":1163,"byte_end":1169,"line_start":61,"line_end":61,"column_start":31,"column_end":37,"is_primary":true,"text":[{"text":"            Herbivore => self.health.age += 1,","highlight_start":31,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:61:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Herbivore => self.health.age += 1,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":1261,"byte_end":1262,"line_start":65,"line_end":65,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:65:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let move_prob = self.p.mu * self.fitness();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":1519,"byte_end":1520,"line_start":75,"line_end":75,"column_start":47,"column_end":48,"is_primary":true,"text":[{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":47,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:75:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":1535,"byte_end":1536,"line_start":75,"line_end":75,"column_start":63,"column_end":64,"is_primary":true,"text":[{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":63,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:75:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":1770,"byte_end":1776,"line_start":81,"line_end":81,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"        if self.health.weight <= 0. {","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:81:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.health.weight <= 0. {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":1860,"byte_end":1861,"line_start":84,"line_end":84,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:84:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let death_prob = self.p.omega * (1. - self.fitness());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2083,"byte_end":2089,"line_start":93,"line_end":93,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:93:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.health._fitness == None || self.health._fitness_valid == Some(false) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2115,"byte_end":2121,"line_start":93,"line_end":93,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":49,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:93:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.health._fitness == None || self.health._fitness_valid == Some(false) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2171,"byte_end":2177,"line_start":94,"line_end":94,"column_start":18,"column_end":24,"is_primary":true,"text":[{"text":"            self.health._fitness = Some(","highlight_start":18,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:94:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.health._fitness = Some(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2222,"byte_end":2228,"line_start":95,"line_end":95,"column_start":28,"column_end":34,"is_primary":true,"text":[{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":28,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:95:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2246,"byte_end":2247,"line_start":95,"line_end":95,"column_start":52,"column_end":53,"is_primary":true,"text":[{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":52,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:95:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2261,"byte_end":2262,"line_start":95,"line_end":95,"column_start":67,"column_end":68,"is_primary":true,"text":[{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":67,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:95:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2306,"byte_end":2312,"line_start":96,"line_end":96,"column_start":35,"column_end":41,"is_primary":true,"text":[{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":35,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:96:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2326,"byte_end":2327,"line_start":96,"line_end":96,"column_start":55,"column_end":56,"is_primary":true,"text":[{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":55,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:96:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2341,"byte_end":2342,"line_start":96,"line_end":96,"column_start":70,"column_end":71,"is_primary":true,"text":[{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":70,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:96:70\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2388,"byte_end":2394,"line_start":98,"line_end":98,"column_start":18,"column_end":24,"is_primary":true,"text":[{"text":"            self.health._fitness_valid = Some(true);","highlight_start":18,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:98:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.health._fitness_valid = Some(true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2447,"byte_end":2453,"line_start":100,"line_end":100,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"        self.health._fitness.unwrap()","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:100:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.health._fitness.unwrap()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2523,"byte_end":2529,"line_start":103,"line_end":103,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:103:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.health.weight -= self.health.weight * self.p.eta;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2545,"byte_end":2551,"line_start":103,"line_end":103,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:103:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.health.weight -= self.health.weight * self.p.eta;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2566,"byte_end":2567,"line_start":103,"line_end":103,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:103:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.health.weight -= self.health.weight * self.p.eta;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2586,"byte_end":2592,"line_start":104,"line_end":104,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"        self.health._fitness_valid = Some(false);","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:104:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.health._fitness_valid = Some(false);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2755,"byte_end":2756,"line_start":109,"line_end":109,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":31,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:109:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2820,"byte_end":2826,"line_start":111,"line_end":111,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:111:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2842,"byte_end":2843,"line_start":111,"line_end":111,"column_start":39,"column_end":40,"is_primary":true,"text":[{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":39,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:111:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2857,"byte_end":2858,"line_start":111,"line_end":111,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:111:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":2874,"byte_end":2875,"line_start":111,"line_end":111,"column_start":71,"column_end":72,"is_primary":true,"text":[{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":71,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:111:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":3475,"byte_end":3481,"line_start":130,"line_end":130,"column_start":45,"column_end":51,"is_primary":true,"text":[{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":45,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:130:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if birth_weight.unwrap() < self.health.weight {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":3512,"byte_end":3518,"line_start":131,"line_end":131,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:131:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.health.weight -= self.p.xi * birth_weight.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `p` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":3534,"byte_end":3535,"line_start":131,"line_end":131,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `p` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:131:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.health.weight -= self.p.xi * birth_weight.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"no field `health` on type `&mut Self`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/animal.rs","byte_start":1015,"byte_end":4105,"line_start":56,"line_end":150,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub trait AnimalTraits<T> {","highlight_start":1,"highlight_end":28},{"text":"    fn new(weight: f64, age: u8) -> Self;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn aging(&mut self) {","highlight_start":1,"highlight_end":26},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            Herbivore => self.health.age += 1,","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn migrate(&mut self) -> bool {","highlight_start":1,"highlight_end":36},{"text":"        let move_prob = self.p.mu * self.fitness();","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if random_float() < move_prob {","highlight_start":1,"highlight_end":40},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn birth_weight(&self) -> f64 {","highlight_start":1,"highlight_end":36},{"text":"        let mut source = source::default();","highlight_start":1,"highlight_end":44},{"text":"        let distribution = Gaussian::new(self.p.w_birth, self.p.sigma_birth);","highlight_start":1,"highlight_end":78},{"text":"        let sampler = Independent(&distribution, &mut source);","highlight_start":1,"highlight_end":63},{"text":"        let samples = sampler.take(1).collect::<Vec<_>>();","highlight_start":1,"highlight_end":59},{"text":"        return *samples.get(0).unwrap();","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn death(&mut self) -> bool {","highlight_start":1,"highlight_end":34},{"text":"        if self.health.weight <= 0. {","highlight_start":1,"highlight_end":38},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let death_prob = self.p.omega * (1. - self.fitness());","highlight_start":1,"highlight_end":67},{"text":"            if random_float() < death_prob {","highlight_start":1,"highlight_end":45},{"text":"                true","highlight_start":1,"highlight_end":21},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                false","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn fitness(&mut self) -> f64 {","highlight_start":1,"highlight_end":35},{"text":"        if self.health._fitness == None || self.health._fitness_valid == Some(false) {","highlight_start":1,"highlight_end":87},{"text":"            self.health._fitness = Some(","highlight_start":1,"highlight_end":41},{"text":"                q(1., self.health.age as f64, self.p.a_half, self.p.phi_age)","highlight_start":1,"highlight_end":77},{"text":"                    * q(-1., self.health.weight, self.p.w_half, self.p.phi_weight),","highlight_start":1,"highlight_end":84},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            self.health._fitness_valid = Some(true);","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.health._fitness.unwrap()","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn lose_weight(&mut self) {","highlight_start":1,"highlight_end":32},{"text":"        self.health.weight -= self.health.weight * self.p.eta;","highlight_start":1,"highlight_end":63},{"text":"        self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    fn give_birth(&mut self, n_same: u32) -> BirthResult {","highlight_start":1,"highlight_end":59},{"text":"        let mut give_birth = false;","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let birth_prob = self.p.gamma * self.fitness() * (n_same - 1) as f64;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if self.health.weight < (self.p.zeta * (self.p.w_birth + self.p.sigma_birth)) {","highlight_start":1,"highlight_end":88},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: give_birth,","highlight_start":1,"highlight_end":41},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        } else if birth_prob >= 1. {","highlight_start":1,"highlight_end":37},{"text":"            give_birth = true;","highlight_start":1,"highlight_end":31},{"text":"        } else if birth_prob > 0. && birth_prob < 1. {","highlight_start":1,"highlight_end":55},{"text":"            if random_float() < birth_prob {","highlight_start":1,"highlight_end":45},{"text":"                give_birth = true;","highlight_start":1,"highlight_end":35},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                give_birth = false","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            give_birth = false","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if give_birth {","highlight_start":1,"highlight_end":24},{"text":"            let birth_weight = Some(self.birth_weight());","highlight_start":1,"highlight_end":58},{"text":"            if birth_weight.unwrap() < self.health.weight {","highlight_start":1,"highlight_end":60},{"text":"                self.health.weight -= self.p.xi * birth_weight.unwrap();","highlight_start":1,"highlight_end":73},{"text":"                self.health._fitness_valid = Some(false);","highlight_start":1,"highlight_end":58},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: true,","highlight_start":1,"highlight_end":39},{"text":"                    birth_weight: Some(birth_weight).unwrap(),","highlight_start":1,"highlight_end":63},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                return BirthResult {","highlight_start":1,"highlight_end":37},{"text":"                    given_birth: false,","highlight_start":1,"highlight_end":40},{"text":"                    birth_weight: None,","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            return BirthResult {","highlight_start":1,"highlight_end":33},{"text":"                given_birth: false,","highlight_start":1,"highlight_end":36},{"text":"                birth_weight: None,","highlight_start":1,"highlight_end":36},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"type parameter 'Self' declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/animal.rs","byte_start":3585,"byte_end":3591,"line_start":132,"line_end":132,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"                self.health._fitness_valid = Some(false);","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `health` on type `&mut Self`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/animal.rs:132:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait AnimalTraits<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(weight: f64, age: u8) -> Self;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn aging(&mut self) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.health._fitness_valid = Some(false);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtype parameter 'Self' declared here\u001b[0m\n\n"}
{"message":"unused import: `island`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":104,"byte_end":110,"line_start":9,"line_end":9,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use island::*;","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `island`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse island::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `animal`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":71,"byte_end":77,"line_start":7,"line_end":7,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use animal::*;","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `animal`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse animal::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::island`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/landscape.rs","byte_start":27,"byte_end":40,"line_start":3,"line_end":3,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"use crate::island::*;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::island`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/landscape.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::island::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::animal`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/island.rs","byte_start":70,"byte_end":83,"line_start":6,"line_end":6,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"use crate::animal::*;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::animal`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/island.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::animal::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::animal`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/biosim.rs","byte_start":32,"byte_end":45,"line_start":3,"line_end":3,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"use crate::animal::*;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::animal`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/biosim.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::animal::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 30 previous errors; 12 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 30 previous errors; 12 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0609`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0609`.\u001b[0m\n"}
