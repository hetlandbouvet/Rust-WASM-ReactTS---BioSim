<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="5548"><g><title>biosim`DYLD-STUB$$memcpy (5 samples, 0.09%)</title><rect x="0.0000%" y="197" width="0.0901%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="207.50"></text></g><g><title>biosim`&lt;biosim::animal::Herbivore as biosim::animal::AnimalTraits&gt;::give_birth (4 samples, 0.07%)</title><rect x="2.2711%" y="181" width="0.0721%" height="15" fill="rgb(217,0,24)" fg:x="126" fg:w="4"/><text x="2.5211%" y="191.50"></text></g><g><title>biosim`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.07%)</title><rect x="2.3432%" y="181" width="0.0721%" height="15" fill="rgb(221,193,54)" fg:x="130" fg:w="4"/><text x="2.5932%" y="191.50"></text></g><g><title>biosim`DYLD-STUB$$memcpy (5 samples, 0.09%)</title><rect x="2.4153%" y="181" width="0.0901%" height="15" fill="rgb(248,212,6)" fg:x="134" fg:w="5"/><text x="2.6653%" y="191.50"></text></g><g><title>biosim`DYLD-STUB$$pow (2 samples, 0.04%)</title><rect x="2.5054%" y="181" width="0.0360%" height="15" fill="rgb(208,68,35)" fg:x="139" fg:w="2"/><text x="2.7554%" y="191.50"></text></g><g><title>biosim`__rdl_alloc (1 samples, 0.02%)</title><rect x="2.5415%" y="181" width="0.0180%" height="15" fill="rgb(232,128,0)" fg:x="141" fg:w="1"/><text x="2.7915%" y="191.50"></text></g><g><title>biosim`__rdl_dealloc (1 samples, 0.02%)</title><rect x="2.5595%" y="181" width="0.0180%" height="15" fill="rgb(207,160,47)" fg:x="142" fg:w="1"/><text x="2.8095%" y="191.50"></text></g><g><title>biosim`__rust_dealloc (1 samples, 0.02%)</title><rect x="2.5775%" y="181" width="0.0180%" height="15" fill="rgb(228,23,34)" fg:x="143" fg:w="1"/><text x="2.8275%" y="191.50"></text></g><g><title>biosim`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.04%)</title><rect x="2.5955%" y="181" width="0.0360%" height="15" fill="rgb(218,30,26)" fg:x="144" fg:w="2"/><text x="2.8455%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="3.1723%" y="149" width="0.0180%" height="15" fill="rgb(220,122,19)" fg:x="176" fg:w="1"/><text x="3.4223%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.14%)</title><rect x="3.1182%" y="165" width="0.1442%" height="15" fill="rgb(250,228,42)" fg:x="173" fg:w="8"/><text x="3.3682%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.07%)</title><rect x="3.1903%" y="149" width="0.0721%" height="15" fill="rgb(240,193,28)" fg:x="177" fg:w="4"/><text x="3.4403%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.05%)</title><rect x="3.2084%" y="133" width="0.0541%" height="15" fill="rgb(216,20,37)" fg:x="178" fg:w="3"/><text x="3.4584%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.07%)</title><rect x="3.4607%" y="149" width="0.0721%" height="15" fill="rgb(206,188,39)" fg:x="192" fg:w="4"/><text x="3.7107%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.04%)</title><rect x="3.5328%" y="149" width="0.0360%" height="15" fill="rgb(217,207,13)" fg:x="196" fg:w="2"/><text x="3.7828%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="3.5689%" y="149" width="0.0180%" height="15" fill="rgb(231,73,38)" fg:x="198" fg:w="1"/><text x="3.8189%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (31 samples, 0.56%)</title><rect x="3.2624%" y="165" width="0.5588%" height="15" fill="rgb(225,20,46)" fg:x="181" fg:w="31"/><text x="3.5124%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.23%)</title><rect x="3.5869%" y="149" width="0.2343%" height="15" fill="rgb(210,31,41)" fg:x="199" fg:w="13"/><text x="3.8369%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="3.9293%" y="133" width="0.0180%" height="15" fill="rgb(221,200,47)" fg:x="218" fg:w="1"/><text x="4.1793%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.14%)</title><rect x="3.8212%" y="165" width="0.1442%" height="15" fill="rgb(226,26,5)" fg:x="212" fg:w="8"/><text x="4.0712%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.13%)</title><rect x="3.8392%" y="149" width="0.1262%" height="15" fill="rgb(249,33,26)" fg:x="213" fg:w="7"/><text x="4.0892%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="3.9474%" y="133" width="0.0180%" height="15" fill="rgb(235,183,28)" fg:x="219" fg:w="1"/><text x="4.1974%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.04%)</title><rect x="3.9654%" y="165" width="0.0360%" height="15" fill="rgb(221,5,38)" fg:x="220" fg:w="2"/><text x="4.2154%" y="175.50"></text></g><g><title>biosim`biosim::landscape::LandCell::add_animals (110 samples, 1.98%)</title><rect x="2.6316%" y="181" width="1.9827%" height="15" fill="rgb(247,18,42)" fg:x="146" fg:w="110"/><text x="2.8816%" y="191.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (34 samples, 0.61%)</title><rect x="4.0014%" y="165" width="0.6128%" height="15" fill="rgb(241,131,45)" fg:x="222" fg:w="34"/><text x="4.2514%" y="175.50"></text></g><g><title>biosim`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (4 samples, 0.07%)</title><rect x="10.5804%" y="133" width="0.0721%" height="15" fill="rgb(249,31,29)" fg:x="587" fg:w="4"/><text x="10.8304%" y="143.50"></text></g><g><title>biosim`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (4 samples, 0.07%)</title><rect x="10.5804%" y="117" width="0.0721%" height="15" fill="rgb(225,111,53)" fg:x="587" fg:w="4"/><text x="10.8304%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (4 samples, 0.07%)</title><rect x="10.5804%" y="101" width="0.0721%" height="15" fill="rgb(238,160,17)" fg:x="587" fg:w="4"/><text x="10.8304%" y="111.50"></text></g><g><title>biosim`rand::distributions::float::_&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (102 samples, 1.84%)</title><rect x="9.9856%" y="149" width="1.8385%" height="15" fill="rgb(214,148,48)" fg:x="554" fg:w="102"/><text x="10.2356%" y="159.50">b..</text></g><g><title>biosim`rand_chacha::guts::refill_wide::impl_avx2 (65 samples, 1.17%)</title><rect x="10.6525%" y="133" width="1.1716%" height="15" fill="rgb(232,36,49)" fg:x="591" fg:w="65"/><text x="10.9025%" y="143.50"></text></g><g><title>biosim`rand::rngs::thread::thread_rng (14 samples, 0.25%)</title><rect x="11.8241%" y="149" width="0.2523%" height="15" fill="rgb(209,103,24)" fg:x="656" fg:w="14"/><text x="12.0741%" y="159.50"></text></g><g><title>biosim`biosim::util::random_float (155 samples, 2.79%)</title><rect x="9.3727%" y="165" width="2.7938%" height="15" fill="rgb(229,88,8)" fg:x="520" fg:w="155"/><text x="9.6227%" y="175.50">bi..</text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.09%)</title><rect x="12.0764%" y="149" width="0.0901%" height="15" fill="rgb(213,181,19)" fg:x="670" fg:w="5"/><text x="12.3264%" y="159.50"></text></g><g><title>biosim`rand::distributions::float::_&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (3 samples, 0.05%)</title><rect x="12.1665%" y="165" width="0.0541%" height="15" fill="rgb(254,191,54)" fg:x="675" fg:w="3"/><text x="12.4165%" y="175.50"></text></g><g><title>biosim`biosim::landscape::LandCell::death (504 samples, 9.08%)</title><rect x="4.6143%" y="181" width="9.0844%" height="15" fill="rgb(241,83,37)" fg:x="256" fg:w="504"/><text x="4.8643%" y="191.50">biosim`biosim..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (82 samples, 1.48%)</title><rect x="12.2206%" y="165" width="1.4780%" height="15" fill="rgb(233,36,39)" fg:x="678" fg:w="82"/><text x="12.4706%" y="175.50"></text></g><g><title>biosim`rand_chacha::guts::refill_wide (2 samples, 0.04%)</title><rect x="16.6547%" y="133" width="0.0360%" height="15" fill="rgb(226,3,54)" fg:x="924" fg:w="2"/><text x="16.9047%" y="143.50"></text></g><g><title>biosim`rand::rng::Rng::gen_range (139 samples, 2.51%)</title><rect x="14.7981%" y="149" width="2.5054%" height="15" fill="rgb(245,192,40)" fg:x="821" fg:w="139"/><text x="15.0481%" y="159.50">bi..</text></g><g><title>biosim`rand_chacha::guts::refill_wide::impl_avx2 (34 samples, 0.61%)</title><rect x="16.6907%" y="133" width="0.6128%" height="15" fill="rgb(238,167,29)" fg:x="926" fg:w="34"/><text x="16.9407%" y="143.50"></text></g><g><title>biosim`rand_chacha::guts::refill_wide (1 samples, 0.02%)</title><rect x="17.3035%" y="149" width="0.0180%" height="15" fill="rgb(232,182,51)" fg:x="960" fg:w="1"/><text x="17.5535%" y="159.50"></text></g><g><title>biosim`&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (656 samples, 11.82%)</title><rect x="14.0952%" y="165" width="11.8241%" height="15" fill="rgb(231,60,39)" fg:x="782" fg:w="656"/><text x="14.3452%" y="175.50">biosim`&lt;[T] as ran..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (477 samples, 8.60%)</title><rect x="17.3216%" y="149" width="8.5977%" height="15" fill="rgb(208,69,12)" fg:x="961" fg:w="477"/><text x="17.5716%" y="159.50">libsystem_pl..</text></g><g><title>biosim`DYLD-STUB$$memcpy (34 samples, 0.61%)</title><rect x="25.9193%" y="165" width="0.6128%" height="15" fill="rgb(235,93,37)" fg:x="1438" fg:w="34"/><text x="26.1693%" y="175.50"></text></g><g><title>biosim`__rdl_alloc (1 samples, 0.02%)</title><rect x="26.5321%" y="165" width="0.0180%" height="15" fill="rgb(213,116,39)" fg:x="1472" fg:w="1"/><text x="26.7821%" y="175.50"></text></g><g><title>biosim`__rdl_dealloc (1 samples, 0.02%)</title><rect x="26.5501%" y="165" width="0.0180%" height="15" fill="rgb(222,207,29)" fg:x="1473" fg:w="1"/><text x="26.8001%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.11%)</title><rect x="35.0216%" y="117" width="0.1081%" height="15" fill="rgb(206,96,30)" fg:x="1943" fg:w="6"/><text x="35.2716%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.11%)</title><rect x="35.0216%" y="101" width="0.1081%" height="15" fill="rgb(218,138,4)" fg:x="1943" fg:w="6"/><text x="35.2716%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.11%)</title><rect x="35.0216%" y="85" width="0.1081%" height="15" fill="rgb(250,191,14)" fg:x="1943" fg:w="6"/><text x="35.2716%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.07%)</title><rect x="35.0577%" y="69" width="0.0721%" height="15" fill="rgb(239,60,40)" fg:x="1945" fg:w="4"/><text x="35.3077%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.04%)</title><rect x="35.1298%" y="117" width="0.0360%" height="15" fill="rgb(206,27,48)" fg:x="1949" fg:w="2"/><text x="35.3798%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (1 samples, 0.02%)</title><rect x="35.1658%" y="69" width="0.0180%" height="15" fill="rgb(225,35,8)" fg:x="1951" fg:w="1"/><text x="35.4158%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="35.1839%" y="69" width="0.0180%" height="15" fill="rgb(250,213,24)" fg:x="1952" fg:w="1"/><text x="35.4339%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="35.2019%" y="69" width="0.0360%" height="15" fill="rgb(247,123,22)" fg:x="1953" fg:w="2"/><text x="35.4519%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="35.2019%" y="53" width="0.0360%" height="15" fill="rgb(231,138,38)" fg:x="1953" fg:w="2"/><text x="35.4519%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="35.2379%" y="69" width="0.0180%" height="15" fill="rgb(231,145,46)" fg:x="1955" fg:w="1"/><text x="35.4879%" y="79.50"></text></g><g><title>biosim`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.31%)</title><rect x="34.9676%" y="149" width="0.3064%" height="15" fill="rgb(251,118,11)" fg:x="1940" fg:w="17"/><text x="35.2176%" y="159.50"></text></g><g><title>biosim`alloc::raw_vec::finish_grow (15 samples, 0.27%)</title><rect x="35.0036%" y="133" width="0.2704%" height="15" fill="rgb(217,147,25)" fg:x="1942" fg:w="15"/><text x="35.2536%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.11%)</title><rect x="35.1658%" y="117" width="0.1081%" height="15" fill="rgb(247,81,37)" fg:x="1951" fg:w="6"/><text x="35.4158%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.11%)</title><rect x="35.1658%" y="101" width="0.1081%" height="15" fill="rgb(209,12,38)" fg:x="1951" fg:w="6"/><text x="35.4158%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.11%)</title><rect x="35.1658%" y="85" width="0.1081%" height="15" fill="rgb(227,1,9)" fg:x="1951" fg:w="6"/><text x="35.4158%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="35.2559%" y="69" width="0.0180%" height="15" fill="rgb(248,47,43)" fg:x="1956" fg:w="1"/><text x="35.5059%" y="79.50"></text></g><g><title>biosim`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="35.2740%" y="149" width="0.0180%" height="15" fill="rgb(221,10,30)" fg:x="1957" fg:w="1"/><text x="35.5240%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.09%)</title><rect x="35.4722%" y="85" width="0.0901%" height="15" fill="rgb(210,229,1)" fg:x="1968" fg:w="5"/><text x="35.7222%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.32%)</title><rect x="35.2920%" y="149" width="0.3244%" height="15" fill="rgb(222,148,37)" fg:x="1958" fg:w="18"/><text x="35.5420%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.27%)</title><rect x="35.3461%" y="133" width="0.2704%" height="15" fill="rgb(234,67,33)" fg:x="1961" fg:w="15"/><text x="35.5961%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (15 samples, 0.27%)</title><rect x="35.3461%" y="117" width="0.2704%" height="15" fill="rgb(247,98,35)" fg:x="1961" fg:w="15"/><text x="35.5961%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.18%)</title><rect x="35.4362%" y="101" width="0.1802%" height="15" fill="rgb(247,138,52)" fg:x="1966" fg:w="10"/><text x="35.6862%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.05%)</title><rect x="35.5624%" y="85" width="0.0541%" height="15" fill="rgb(213,79,30)" fg:x="1973" fg:w="3"/><text x="35.8124%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="35.6164%" y="149" width="0.0180%" height="15" fill="rgb(246,177,23)" fg:x="1976" fg:w="1"/><text x="35.8664%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.07%)</title><rect x="35.6705%" y="133" width="0.0721%" height="15" fill="rgb(230,62,27)" fg:x="1979" fg:w="4"/><text x="35.9205%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.05%)</title><rect x="35.7426%" y="133" width="0.0541%" height="15" fill="rgb(216,154,8)" fg:x="1983" fg:w="3"/><text x="35.9926%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.18%)</title><rect x="35.6345%" y="149" width="0.1802%" height="15" fill="rgb(244,35,45)" fg:x="1977" fg:w="10"/><text x="35.8845%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="35.7967%" y="133" width="0.0180%" height="15" fill="rgb(251,115,12)" fg:x="1986" fg:w="1"/><text x="36.0467%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="35.7967%" y="117" width="0.0180%" height="15" fill="rgb(240,54,50)" fg:x="1986" fg:w="1"/><text x="36.0467%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="35.9048%" y="133" width="0.0180%" height="15" fill="rgb(233,84,52)" fg:x="1992" fg:w="1"/><text x="36.1548%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.13%)</title><rect x="35.8147%" y="149" width="0.1262%" height="15" fill="rgb(207,117,47)" fg:x="1987" fg:w="7"/><text x="36.0647%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="35.9229%" y="133" width="0.0180%" height="15" fill="rgb(249,43,39)" fg:x="1993" fg:w="1"/><text x="36.1729%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.04%)</title><rect x="35.9409%" y="149" width="0.0360%" height="15" fill="rgb(209,38,44)" fg:x="1994" fg:w="2"/><text x="36.1909%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="35.9769%" y="149" width="0.0180%" height="15" fill="rgb(236,212,23)" fg:x="1996" fg:w="1"/><text x="36.2269%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="35.9950%" y="149" width="0.0180%" height="15" fill="rgb(242,79,21)" fg:x="1997" fg:w="1"/><text x="36.2450%" y="159.50"></text></g><g><title>biosim`alloc::slice::merge_sort (1,152 samples, 20.76%)</title><rect x="26.5681%" y="165" width="20.7642%" height="15" fill="rgb(211,96,35)" fg:x="1474" fg:w="1152"/><text x="26.8181%" y="175.50">biosim`alloc::slice::merge_sort</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (628 samples, 11.32%)</title><rect x="36.0130%" y="149" width="11.3194%" height="15" fill="rgb(253,215,40)" fg:x="1998" fg:w="628"/><text x="36.2630%" y="159.50">libsystem_platfor..</text></g><g><title>biosim`rand::rng::Rng::gen_range (3 samples, 0.05%)</title><rect x="47.3324%" y="165" width="0.0541%" height="15" fill="rgb(211,81,21)" fg:x="2626" fg:w="3"/><text x="47.5824%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="47.3864%" y="165" width="0.0180%" height="15" fill="rgb(208,190,38)" fg:x="2629" fg:w="1"/><text x="47.6364%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (48 samples, 0.87%)</title><rect x="47.4045%" y="165" width="0.8652%" height="15" fill="rgb(235,213,38)" fg:x="2630" fg:w="48"/><text x="47.6545%" y="175.50"></text></g><g><title>biosim`biosim::landscape::LandCell::feeding (2,059 samples, 37.11%)</title><rect x="13.6986%" y="181" width="37.1125%" height="15" fill="rgb(237,122,38)" fg:x="760" fg:w="2059"/><text x="13.9486%" y="191.50">biosim`biosim::landscape::LandCell::feeding</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (141 samples, 2.54%)</title><rect x="48.2696%" y="165" width="2.5415%" height="15" fill="rgb(244,218,35)" fg:x="2678" fg:w="141"/><text x="48.5196%" y="175.50">li..</text></g><g><title>biosim`__rdl_realloc (1 samples, 0.02%)</title><rect x="52.5595%" y="149" width="0.0180%" height="15" fill="rgb(240,68,47)" fg:x="2916" fg:w="1"/><text x="52.8095%" y="159.50"></text></g><g><title>biosim`__rdl_realloc (1 samples, 0.02%)</title><rect x="52.6496%" y="133" width="0.0180%" height="15" fill="rgb(210,16,53)" fg:x="2921" fg:w="1"/><text x="52.8996%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.04%)</title><rect x="52.8298%" y="117" width="0.0360%" height="15" fill="rgb(235,124,12)" fg:x="2931" fg:w="2"/><text x="53.0798%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.09%)</title><rect x="52.9200%" y="101" width="0.0901%" height="15" fill="rgb(224,169,11)" fg:x="2936" fg:w="5"/><text x="53.1700%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (1 samples, 0.02%)</title><rect x="53.0281%" y="85" width="0.0180%" height="15" fill="rgb(250,166,2)" fg:x="2942" fg:w="1"/><text x="53.2781%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.09%)</title><rect x="53.0461%" y="85" width="0.0901%" height="15" fill="rgb(242,216,29)" fg:x="2943" fg:w="5"/><text x="53.2961%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.09%)</title><rect x="53.1363%" y="85" width="0.0901%" height="15" fill="rgb(230,116,27)" fg:x="2948" fg:w="5"/><text x="53.3863%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="53.2264%" y="69" width="0.0180%" height="15" fill="rgb(228,99,48)" fg:x="2953" fg:w="1"/><text x="53.4764%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.07%)</title><rect x="53.4066%" y="53" width="0.0721%" height="15" fill="rgb(253,11,6)" fg:x="2963" fg:w="4"/><text x="53.6566%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.41%)</title><rect x="53.2264%" y="85" width="0.4146%" height="15" fill="rgb(247,143,39)" fg:x="2953" fg:w="23"/><text x="53.4764%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.40%)</title><rect x="53.2444%" y="69" width="0.3965%" height="15" fill="rgb(236,97,10)" fg:x="2954" fg:w="22"/><text x="53.4944%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.16%)</title><rect x="53.4787%" y="53" width="0.1622%" height="15" fill="rgb(233,208,19)" fg:x="2967" fg:w="9"/><text x="53.7287%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (36 samples, 0.65%)</title><rect x="53.0101%" y="101" width="0.6489%" height="15" fill="rgb(216,164,2)" fg:x="2941" fg:w="36"/><text x="53.2601%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="53.6410%" y="85" width="0.0180%" height="15" fill="rgb(220,129,5)" fg:x="2976" fg:w="1"/><text x="53.8910%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (2 samples, 0.04%)</title><rect x="53.6590%" y="101" width="0.0360%" height="15" fill="rgb(242,17,10)" fg:x="2977" fg:w="2"/><text x="53.9090%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (1 samples, 0.02%)</title><rect x="53.6950%" y="101" width="0.0180%" height="15" fill="rgb(242,107,0)" fg:x="2979" fg:w="1"/><text x="53.9450%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.02%)</title><rect x="53.8212%" y="69" width="0.0180%" height="15" fill="rgb(251,28,31)" fg:x="2986" fg:w="1"/><text x="54.0712%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.07%)</title><rect x="53.7851%" y="85" width="0.0721%" height="15" fill="rgb(233,223,10)" fg:x="2984" fg:w="4"/><text x="54.0351%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="53.8392%" y="69" width="0.0180%" height="15" fill="rgb(215,21,27)" fg:x="2987" fg:w="1"/><text x="54.0892%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="53.9834%" y="69" width="0.0180%" height="15" fill="rgb(232,23,21)" fg:x="2995" fg:w="1"/><text x="54.2334%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.36%)</title><rect x="53.8572%" y="85" width="0.3605%" height="15" fill="rgb(244,5,23)" fg:x="2988" fg:w="20"/><text x="54.1072%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.22%)</title><rect x="54.0014%" y="69" width="0.2163%" height="15" fill="rgb(226,81,46)" fg:x="2996" fg:w="12"/><text x="54.2514%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="54.1817%" y="53" width="0.0360%" height="15" fill="rgb(247,70,30)" fg:x="3006" fg:w="2"/><text x="54.4317%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.02%)</title><rect x="54.2177%" y="85" width="0.0180%" height="15" fill="rgb(212,68,19)" fg:x="3008" fg:w="1"/><text x="54.4677%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="54.2177%" y="69" width="0.0180%" height="15" fill="rgb(240,187,13)" fg:x="3008" fg:w="1"/><text x="54.4677%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.04%)</title><rect x="54.4881%" y="37" width="0.0360%" height="15" fill="rgb(223,113,26)" fg:x="3023" fg:w="2"/><text x="54.7381%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.34%)</title><rect x="54.2358%" y="85" width="0.3425%" height="15" fill="rgb(206,192,2)" fg:x="3009" fg:w="19"/><text x="54.4858%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.32%)</title><rect x="54.2538%" y="69" width="0.3244%" height="15" fill="rgb(241,108,4)" fg:x="3010" fg:w="18"/><text x="54.5038%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.14%)</title><rect x="54.4340%" y="53" width="0.1442%" height="15" fill="rgb(247,173,49)" fg:x="3020" fg:w="8"/><text x="54.6840%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.05%)</title><rect x="54.5242%" y="37" width="0.0541%" height="15" fill="rgb(224,114,35)" fg:x="3025" fg:w="3"/><text x="54.7742%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.09%)</title><rect x="54.5782%" y="85" width="0.0901%" height="15" fill="rgb(245,159,27)" fg:x="3028" fg:w="5"/><text x="54.8282%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="54.6323%" y="69" width="0.0360%" height="15" fill="rgb(245,172,44)" fg:x="3031" fg:w="2"/><text x="54.8823%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (55 samples, 0.99%)</title><rect x="53.7130%" y="101" width="0.9913%" height="15" fill="rgb(236,23,11)" fg:x="2980" fg:w="55"/><text x="53.9630%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="54.6683%" y="85" width="0.0360%" height="15" fill="rgb(205,117,38)" fg:x="3033" fg:w="2"/><text x="54.9183%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (104 samples, 1.87%)</title><rect x="52.8659%" y="117" width="1.8745%" height="15" fill="rgb(237,72,25)" fg:x="2933" fg:w="104"/><text x="53.1159%" y="127.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="54.7044%" y="101" width="0.0360%" height="15" fill="rgb(244,70,9)" fg:x="3035" fg:w="2"/><text x="54.9544%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.14%)</title><rect x="54.7404%" y="117" width="0.1442%" height="15" fill="rgb(217,125,39)" fg:x="3037" fg:w="8"/><text x="54.9904%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.04%)</title><rect x="54.8846%" y="117" width="0.0360%" height="15" fill="rgb(235,36,10)" fg:x="3045" fg:w="2"/><text x="55.1346%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="54.9207%" y="117" width="0.0180%" height="15" fill="rgb(251,123,47)" fg:x="3047" fg:w="1"/><text x="55.1707%" y="127.50"></text></g><g><title>biosim`alloc::raw_vec::finish_grow (135 samples, 2.43%)</title><rect x="52.5775%" y="149" width="2.4333%" height="15" fill="rgb(221,13,13)" fg:x="2917" fg:w="135"/><text x="52.8275%" y="159.50">bi..</text></g><g><title>libsystem_malloc.dylib`realloc (130 samples, 2.34%)</title><rect x="52.6676%" y="133" width="2.3432%" height="15" fill="rgb(238,131,9)" fg:x="2922" fg:w="130"/><text x="52.9176%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.07%)</title><rect x="54.9387%" y="117" width="0.0721%" height="15" fill="rgb(211,50,8)" fg:x="3048" fg:w="4"/><text x="55.1887%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.07%)</title><rect x="54.9387%" y="101" width="0.0721%" height="15" fill="rgb(245,182,24)" fg:x="3048" fg:w="4"/><text x="55.1887%" y="111.50"></text></g><g><title>biosim`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (148 samples, 2.67%)</title><rect x="52.3792%" y="165" width="2.6676%" height="15" fill="rgb(242,14,37)" fg:x="2906" fg:w="148"/><text x="52.6292%" y="175.50">bi..</text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.04%)</title><rect x="55.0108%" y="149" width="0.0360%" height="15" fill="rgb(246,228,12)" fg:x="3052" fg:w="2"/><text x="55.2608%" y="159.50"></text></g><g><title>biosim`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (6 samples, 0.11%)</title><rect x="56.9755%" y="133" width="0.1081%" height="15" fill="rgb(213,55,15)" fg:x="3161" fg:w="6"/><text x="57.2255%" y="143.50"></text></g><g><title>biosim`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (6 samples, 0.11%)</title><rect x="56.9755%" y="117" width="0.1081%" height="15" fill="rgb(209,9,3)" fg:x="3161" fg:w="6"/><text x="57.2255%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (6 samples, 0.11%)</title><rect x="56.9755%" y="101" width="0.1081%" height="15" fill="rgb(230,59,30)" fg:x="3161" fg:w="6"/><text x="57.2255%" y="111.50"></text></g><g><title>biosim`rand_chacha::guts::refill_wide (2 samples, 0.04%)</title><rect x="57.0836%" y="133" width="0.0360%" height="15" fill="rgb(209,121,21)" fg:x="3167" fg:w="2"/><text x="57.3336%" y="143.50"></text></g><g><title>biosim`rand::distributions::float::_&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (104 samples, 1.87%)</title><rect x="55.8760%" y="149" width="1.8745%" height="15" fill="rgb(220,109,13)" fg:x="3100" fg:w="104"/><text x="56.1260%" y="159.50">b..</text></g><g><title>biosim`rand_chacha::guts::refill_wide::impl_avx2 (35 samples, 0.63%)</title><rect x="57.1197%" y="133" width="0.6309%" height="15" fill="rgb(232,18,1)" fg:x="3169" fg:w="35"/><text x="57.3697%" y="143.50"></text></g><g><title>biosim`rand::rngs::thread::thread_rng (13 samples, 0.23%)</title><rect x="57.7505%" y="149" width="0.2343%" height="15" fill="rgb(215,41,42)" fg:x="3204" fg:w="13"/><text x="58.0005%" y="159.50"></text></g><g><title>biosim`rand_chacha::guts::refill_wide (1 samples, 0.02%)</title><rect x="57.9849%" y="149" width="0.0180%" height="15" fill="rgb(224,123,36)" fg:x="3217" fg:w="1"/><text x="58.2349%" y="159.50"></text></g><g><title>biosim`biosim::util::random_float (174 samples, 3.14%)</title><rect x="55.0469%" y="165" width="3.1363%" height="15" fill="rgb(240,125,3)" fg:x="3054" fg:w="174"/><text x="55.2969%" y="175.50">bio..</text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.18%)</title><rect x="58.0029%" y="149" width="0.1802%" height="15" fill="rgb(205,98,50)" fg:x="3218" fg:w="10"/><text x="58.2529%" y="159.50"></text></g><g><title>biosim`core::hash::BuildHasher::hash_one (67 samples, 1.21%)</title><rect x="58.1831%" y="165" width="1.2076%" height="15" fill="rgb(205,185,37)" fg:x="3228" fg:w="67"/><text x="58.4331%" y="175.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (32 samples, 0.58%)</title><rect x="58.8140%" y="149" width="0.5768%" height="15" fill="rgb(238,207,15)" fg:x="3263" fg:w="32"/><text x="59.0640%" y="159.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (2 samples, 0.04%)</title><rect x="59.3908%" y="165" width="0.0360%" height="15" fill="rgb(213,199,42)" fg:x="3295" fg:w="2"/><text x="59.6408%" y="175.50"></text></g><g><title>biosim`core::hash::BuildHasher::hash_one (6 samples, 0.11%)</title><rect x="59.5169%" y="149" width="0.1081%" height="15" fill="rgb(235,201,11)" fg:x="3302" fg:w="6"/><text x="59.7669%" y="159.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (3 samples, 0.05%)</title><rect x="59.5710%" y="133" width="0.0541%" height="15" fill="rgb(207,46,11)" fg:x="3305" fg:w="3"/><text x="59.8210%" y="143.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (3 samples, 0.05%)</title><rect x="59.6251%" y="149" width="0.0541%" height="15" fill="rgb(241,35,35)" fg:x="3308" fg:w="3"/><text x="59.8751%" y="159.50"></text></g><g><title>biosim`__rdl_dealloc (1 samples, 0.02%)</title><rect x="59.7332%" y="133" width="0.0180%" height="15" fill="rgb(243,32,47)" fg:x="3314" fg:w="1"/><text x="59.9832%" y="143.50"></text></g><g><title>biosim`core::hash::BuildHasher::hash_one (2 samples, 0.04%)</title><rect x="59.7873%" y="117" width="0.0360%" height="15" fill="rgb(247,202,23)" fg:x="3317" fg:w="2"/><text x="60.0373%" y="127.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.02%)</title><rect x="59.8053%" y="101" width="0.0180%" height="15" fill="rgb(219,102,11)" fg:x="3318" fg:w="1"/><text x="60.0553%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.09%)</title><rect x="59.8594%" y="101" width="0.0901%" height="15" fill="rgb(243,110,44)" fg:x="3321" fg:w="5"/><text x="60.1094%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.07%)</title><rect x="59.8774%" y="85" width="0.0721%" height="15" fill="rgb(222,74,54)" fg:x="3322" fg:w="4"/><text x="60.1274%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="59.9315%" y="69" width="0.0180%" height="15" fill="rgb(216,99,12)" fg:x="3325" fg:w="1"/><text x="60.1815%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="59.9856%" y="69" width="0.0180%" height="15" fill="rgb(226,22,26)" fg:x="3328" fg:w="1"/><text x="60.2356%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.27%)</title><rect x="59.8234%" y="117" width="0.2704%" height="15" fill="rgb(217,163,10)" fg:x="3319" fg:w="15"/><text x="60.0734%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.14%)</title><rect x="59.9495%" y="101" width="0.1442%" height="15" fill="rgb(213,25,53)" fg:x="3326" fg:w="8"/><text x="60.1995%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.14%)</title><rect x="59.9495%" y="85" width="0.1442%" height="15" fill="rgb(252,105,26)" fg:x="3326" fg:w="8"/><text x="60.1995%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.09%)</title><rect x="60.0036%" y="69" width="0.0901%" height="15" fill="rgb(220,39,43)" fg:x="3329" fg:w="5"/><text x="60.2536%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="60.0577%" y="53" width="0.0360%" height="15" fill="rgb(229,68,48)" fg:x="3332" fg:w="2"/><text x="60.3077%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="60.0937%" y="117" width="0.0360%" height="15" fill="rgb(252,8,32)" fg:x="3334" fg:w="2"/><text x="60.3437%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.04%)</title><rect x="60.0937%" y="101" width="0.0360%" height="15" fill="rgb(223,20,43)" fg:x="3334" fg:w="2"/><text x="60.3437%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="60.1298%" y="117" width="0.0180%" height="15" fill="rgb(229,81,49)" fg:x="3336" fg:w="1"/><text x="60.3798%" y="127.50"></text></g><g><title>biosim`hashbrown::raw::RawTable&lt;T,A&gt;::insert (27 samples, 0.49%)</title><rect x="59.6792%" y="149" width="0.4867%" height="15" fill="rgb(236,28,36)" fg:x="3311" fg:w="27"/><text x="59.9292%" y="159.50"></text></g><g><title>biosim`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.41%)</title><rect x="59.7513%" y="133" width="0.4146%" height="15" fill="rgb(249,185,26)" fg:x="3315" fg:w="23"/><text x="60.0013%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="60.1478%" y="117" width="0.0180%" height="15" fill="rgb(249,174,33)" fg:x="3337" fg:w="1"/><text x="60.3978%" y="127.50"></text></g><g><title>biosim`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.76%)</title><rect x="59.4268%" y="165" width="0.7570%" height="15" fill="rgb(233,201,37)" fg:x="3297" fg:w="42"/><text x="59.6768%" y="175.50"></text></g><g><title>biosim`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="60.1658%" y="149" width="0.0180%" height="15" fill="rgb(221,78,26)" fg:x="3338" fg:w="1"/><text x="60.4158%" y="159.50"></text></g><g><title>biosim`rand::distributions::float::_&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.04%)</title><rect x="60.1839%" y="165" width="0.0360%" height="15" fill="rgb(250,127,30)" fg:x="3339" fg:w="2"/><text x="60.4339%" y="175.50"></text></g><g><title>biosim`rand::rng::Rng::gen_range (36 samples, 0.65%)</title><rect x="60.2199%" y="165" width="0.6489%" height="15" fill="rgb(230,49,44)" fg:x="3341" fg:w="36"/><text x="60.4699%" y="175.50"></text></g><g><title>biosim`rand_chacha::guts::refill_wide::impl_avx2 (4 samples, 0.07%)</title><rect x="60.7967%" y="149" width="0.0721%" height="15" fill="rgb(229,67,23)" fg:x="3373" fg:w="4"/><text x="61.0467%" y="159.50"></text></g><g><title>biosim`rand::rngs::thread::thread_rng (22 samples, 0.40%)</title><rect x="60.8688%" y="165" width="0.3965%" height="15" fill="rgb(249,83,47)" fg:x="3377" fg:w="22"/><text x="61.1188%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.05%)</title><rect x="61.2653%" y="165" width="0.0541%" height="15" fill="rgb(215,43,3)" fg:x="3399" fg:w="3"/><text x="61.5153%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.29%)</title><rect x="61.3194%" y="165" width="0.2884%" height="15" fill="rgb(238,154,13)" fg:x="3402" fg:w="16"/><text x="61.5694%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.27%)</title><rect x="61.3374%" y="149" width="0.2704%" height="15" fill="rgb(219,56,2)" fg:x="3403" fg:w="15"/><text x="61.5874%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.27%)</title><rect x="61.3374%" y="133" width="0.2704%" height="15" fill="rgb(233,0,4)" fg:x="3403" fg:w="15"/><text x="61.5874%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.14%)</title><rect x="61.4636%" y="117" width="0.1442%" height="15" fill="rgb(235,30,7)" fg:x="3410" fg:w="8"/><text x="61.7136%" y="127.50"></text></g><g><title>biosim`biosim::landscape::LandCell::migrate (621 samples, 11.19%)</title><rect x="50.8111%" y="181" width="11.1932%" height="15" fill="rgb(250,79,13)" fg:x="2819" fg:w="621"/><text x="51.0611%" y="191.50">biosim`biosim::l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.40%)</title><rect x="61.6078%" y="165" width="0.3965%" height="15" fill="rgb(211,146,34)" fg:x="3418" fg:w="22"/><text x="61.8578%" y="175.50"></text></g><g><title>biosim`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="62.7073%" y="165" width="0.0180%" height="15" fill="rgb(228,22,38)" fg:x="3479" fg:w="1"/><text x="62.9573%" y="175.50"></text></g><g><title>biosim`probability::distribution::gaussian::sample (20 samples, 0.36%)</title><rect x="65.6813%" y="133" width="0.3605%" height="15" fill="rgb(235,168,5)" fg:x="3644" fg:w="20"/><text x="65.9313%" y="143.50"></text></g><g><title>libsystem_m.dylib`exp (1 samples, 0.02%)</title><rect x="66.0418%" y="133" width="0.0180%" height="15" fill="rgb(221,155,16)" fg:x="3664" fg:w="1"/><text x="66.2918%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="66.2040%" y="117" width="0.0360%" height="15" fill="rgb(215,215,53)" fg:x="3673" fg:w="2"/><text x="66.4540%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (51 samples, 0.92%)</title><rect x="66.2761%" y="101" width="0.9193%" height="15" fill="rgb(223,4,10)" fg:x="3677" fg:w="51"/><text x="66.5261%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.50%)</title><rect x="66.6907%" y="85" width="0.5047%" height="15" fill="rgb(234,103,6)" fg:x="3700" fg:w="28"/><text x="66.9407%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (64 samples, 1.15%)</title><rect x="66.0598%" y="133" width="1.1536%" height="15" fill="rgb(227,97,0)" fg:x="3665" fg:w="64"/><text x="66.3098%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (54 samples, 0.97%)</title><rect x="66.2401%" y="117" width="0.9733%" height="15" fill="rgb(234,150,53)" fg:x="3675" fg:w="54"/><text x="66.4901%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="67.1954%" y="101" width="0.0180%" height="15" fill="rgb(228,201,54)" fg:x="3728" fg:w="1"/><text x="67.4454%" y="111.50"></text></g><g><title>biosim`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (106 samples, 1.91%)</title><rect x="65.3929%" y="149" width="1.9106%" height="15" fill="rgb(222,22,37)" fg:x="3628" fg:w="106"/><text x="65.6429%" y="159.50">b..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.09%)</title><rect x="67.2134%" y="133" width="0.0901%" height="15" fill="rgb(237,53,32)" fg:x="3729" fg:w="5"/><text x="67.4634%" y="143.50"></text></g><g><title>biosim`__rdl_alloc (2 samples, 0.04%)</title><rect x="67.3035%" y="149" width="0.0360%" height="15" fill="rgb(233,25,53)" fg:x="3734" fg:w="2"/><text x="67.5535%" y="159.50"></text></g><g><title>biosim`probability::distribution::gaussian::sample (1 samples, 0.02%)</title><rect x="67.3396%" y="149" width="0.0180%" height="15" fill="rgb(210,40,34)" fg:x="3736" fg:w="1"/><text x="67.5896%" y="159.50"></text></g><g><title>biosim`random::default::Default::new (4 samples, 0.07%)</title><rect x="67.3576%" y="149" width="0.0721%" height="15" fill="rgb(241,220,44)" fg:x="3737" fg:w="4"/><text x="67.6076%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.07%)</title><rect x="67.4297%" y="149" width="0.0721%" height="15" fill="rgb(235,28,35)" fg:x="3741" fg:w="4"/><text x="67.6797%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="67.5018%" y="149" width="0.0180%" height="15" fill="rgb(210,56,17)" fg:x="3745" fg:w="1"/><text x="67.7518%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.49%)</title><rect x="67.7181%" y="133" width="0.4867%" height="15" fill="rgb(224,130,29)" fg:x="3757" fg:w="27"/><text x="67.9681%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.74%)</title><rect x="67.5198%" y="149" width="0.7390%" height="15" fill="rgb(235,212,8)" fg:x="3746" fg:w="41"/><text x="67.7698%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.05%)</title><rect x="68.2048%" y="133" width="0.0541%" height="15" fill="rgb(223,33,50)" fg:x="3784" fg:w="3"/><text x="68.4548%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.05%)</title><rect x="68.2588%" y="149" width="0.0541%" height="15" fill="rgb(219,149,13)" fg:x="3787" fg:w="3"/><text x="68.5088%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.14%)</title><rect x="68.3129%" y="149" width="0.1442%" height="15" fill="rgb(250,156,29)" fg:x="3790" fg:w="8"/><text x="68.5629%" y="159.50"></text></g><g><title>biosim`&lt;biosim::animal::Herbivore as biosim::animal::AnimalTraits&gt;::give_birth (345 samples, 6.22%)</title><rect x="62.7253%" y="165" width="6.2185%" height="15" fill="rgb(216,193,19)" fg:x="3480" fg:w="345"/><text x="62.9753%" y="175.50">biosim`&lt;..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (27 samples, 0.49%)</title><rect x="68.4571%" y="149" width="0.4867%" height="15" fill="rgb(216,135,14)" fg:x="3798" fg:w="27"/><text x="68.7071%" y="159.50"></text></g><g><title>biosim`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="68.9438%" y="165" width="0.0180%" height="15" fill="rgb(241,47,5)" fg:x="3825" fg:w="1"/><text x="69.1938%" y="175.50"></text></g><g><title>biosim`DYLD-STUB$$pow (1 samples, 0.02%)</title><rect x="68.9618%" y="165" width="0.0180%" height="15" fill="rgb(233,42,35)" fg:x="3826" fg:w="1"/><text x="69.2118%" y="175.50"></text></g><g><title>biosim`__rdl_dealloc (1 samples, 0.02%)</title><rect x="68.9798%" y="165" width="0.0180%" height="15" fill="rgb(231,13,6)" fg:x="3827" fg:w="1"/><text x="69.2298%" y="175.50"></text></g><g><title>biosim`__rust_dealloc (1 samples, 0.02%)</title><rect x="68.9978%" y="165" width="0.0180%" height="15" fill="rgb(207,181,40)" fg:x="3828" fg:w="1"/><text x="69.2478%" y="175.50"></text></g><g><title>biosim`__rust_alloc (1 samples, 0.02%)</title><rect x="69.0339%" y="149" width="0.0180%" height="15" fill="rgb(254,173,49)" fg:x="3830" fg:w="1"/><text x="69.2839%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.13%)</title><rect x="69.0519%" y="133" width="0.1262%" height="15" fill="rgb(221,1,38)" fg:x="3831" fg:w="7"/><text x="69.3019%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.13%)</title><rect x="69.0519%" y="117" width="0.1262%" height="15" fill="rgb(206,124,46)" fg:x="3831" fg:w="7"/><text x="69.3019%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.11%)</title><rect x="69.0699%" y="101" width="0.1081%" height="15" fill="rgb(249,21,11)" fg:x="3832" fg:w="6"/><text x="69.3199%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="69.1781%" y="133" width="0.0180%" height="15" fill="rgb(222,201,40)" fg:x="3838" fg:w="1"/><text x="69.4281%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.09%)</title><rect x="69.2322%" y="85" width="0.0901%" height="15" fill="rgb(235,61,29)" fg:x="3841" fg:w="5"/><text x="69.4822%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.04%)</title><rect x="69.2862%" y="69" width="0.0360%" height="15" fill="rgb(219,207,3)" fg:x="3844" fg:w="2"/><text x="69.5362%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="69.3944%" y="69" width="0.0180%" height="15" fill="rgb(222,56,46)" fg:x="3850" fg:w="1"/><text x="69.6444%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.11%)</title><rect x="69.3223%" y="85" width="0.1081%" height="15" fill="rgb(239,76,54)" fg:x="3846" fg:w="6"/><text x="69.5723%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="69.4124%" y="69" width="0.0180%" height="15" fill="rgb(231,124,27)" fg:x="3851" fg:w="1"/><text x="69.6624%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="69.4124%" y="53" width="0.0180%" height="15" fill="rgb(249,195,6)" fg:x="3851" fg:w="1"/><text x="69.6624%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.04%)</title><rect x="69.5386%" y="69" width="0.0360%" height="15" fill="rgb(237,174,47)" fg:x="3858" fg:w="2"/><text x="69.7886%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (10 samples, 0.18%)</title><rect x="69.4304%" y="85" width="0.1802%" height="15" fill="rgb(206,201,31)" fg:x="3852" fg:w="10"/><text x="69.6804%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.04%)</title><rect x="69.5746%" y="69" width="0.0360%" height="15" fill="rgb(231,57,52)" fg:x="3860" fg:w="2"/><text x="69.8246%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.04%)</title><rect x="69.7729%" y="37" width="0.0360%" height="15" fill="rgb(248,177,22)" fg:x="3871" fg:w="2"/><text x="70.0229%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.05%)</title><rect x="69.8089%" y="37" width="0.0541%" height="15" fill="rgb(215,211,37)" fg:x="3873" fg:w="3"/><text x="70.0589%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.29%)</title><rect x="69.6107%" y="85" width="0.2884%" height="15" fill="rgb(241,128,51)" fg:x="3862" fg:w="16"/><text x="69.8607%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.29%)</title><rect x="69.6107%" y="69" width="0.2884%" height="15" fill="rgb(227,165,31)" fg:x="3862" fg:w="16"/><text x="69.8607%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.14%)</title><rect x="69.7549%" y="53" width="0.1442%" height="15" fill="rgb(228,167,24)" fg:x="3870" fg:w="8"/><text x="70.0049%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.04%)</title><rect x="69.8630%" y="37" width="0.0360%" height="15" fill="rgb(228,143,12)" fg:x="3876" fg:w="2"/><text x="70.1130%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.11%)</title><rect x="69.8991%" y="85" width="0.1081%" height="15" fill="rgb(249,149,8)" fg:x="3878" fg:w="6"/><text x="70.1491%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.07%)</title><rect x="69.9351%" y="69" width="0.0721%" height="15" fill="rgb(243,35,44)" fg:x="3880" fg:w="4"/><text x="70.1851%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (61 samples, 1.10%)</title><rect x="69.2141%" y="117" width="1.0995%" height="15" fill="rgb(246,89,9)" fg:x="3840" fg:w="61"/><text x="69.4641%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (60 samples, 1.08%)</title><rect x="69.2322%" y="101" width="1.0815%" height="15" fill="rgb(233,213,13)" fg:x="3841" fg:w="60"/><text x="69.4822%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 0.31%)</title><rect x="70.0072%" y="85" width="0.3064%" height="15" fill="rgb(233,141,41)" fg:x="3884" fg:w="17"/><text x="70.2572%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (4 samples, 0.07%)</title><rect x="70.3136%" y="117" width="0.0721%" height="15" fill="rgb(239,167,4)" fg:x="3901" fg:w="4"/><text x="70.5636%" y="127.50"></text></g><g><title>biosim`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (77 samples, 1.39%)</title><rect x="69.0159%" y="165" width="1.3879%" height="15" fill="rgb(209,217,16)" fg:x="3829" fg:w="77"/><text x="69.2659%" y="175.50"></text></g><g><title>biosim`alloc::raw_vec::finish_grow (75 samples, 1.35%)</title><rect x="69.0519%" y="149" width="1.3518%" height="15" fill="rgb(219,88,35)" fg:x="3831" fg:w="75"/><text x="69.3019%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (67 samples, 1.21%)</title><rect x="69.1961%" y="133" width="1.2076%" height="15" fill="rgb(220,193,23)" fg:x="3839" fg:w="67"/><text x="69.4461%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="70.3857%" y="117" width="0.0180%" height="15" fill="rgb(230,90,52)" fg:x="3905" fg:w="1"/><text x="70.6357%" y="127.50"></text></g><g><title>biosim`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.07%)</title><rect x="70.5479%" y="149" width="0.0721%" height="15" fill="rgb(252,106,19)" fg:x="3914" fg:w="4"/><text x="70.7979%" y="159.50"></text></g><g><title>biosim`alloc::raw_vec::finish_grow (4 samples, 0.07%)</title><rect x="70.5479%" y="133" width="0.0721%" height="15" fill="rgb(206,74,20)" fg:x="3914" fg:w="4"/><text x="70.7979%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.07%)</title><rect x="70.5479%" y="117" width="0.0721%" height="15" fill="rgb(230,138,44)" fg:x="3914" fg:w="4"/><text x="70.7979%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.07%)</title><rect x="70.5479%" y="101" width="0.0721%" height="15" fill="rgb(235,182,43)" fg:x="3914" fg:w="4"/><text x="70.7979%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.07%)</title><rect x="70.5479%" y="85" width="0.0721%" height="15" fill="rgb(242,16,51)" fg:x="3914" fg:w="4"/><text x="70.7979%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.07%)</title><rect x="70.5479%" y="69" width="0.0721%" height="15" fill="rgb(248,9,4)" fg:x="3914" fg:w="4"/><text x="70.7979%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.07%)</title><rect x="70.6200%" y="149" width="0.0721%" height="15" fill="rgb(210,31,22)" fg:x="3918" fg:w="4"/><text x="70.8700%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.05%)</title><rect x="70.6381%" y="133" width="0.0541%" height="15" fill="rgb(239,54,39)" fg:x="3919" fg:w="3"/><text x="70.8881%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="70.6561%" y="117" width="0.0360%" height="15" fill="rgb(230,99,41)" fg:x="3920" fg:w="2"/><text x="70.9061%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.05%)</title><rect x="70.7282%" y="133" width="0.0541%" height="15" fill="rgb(253,106,12)" fg:x="3924" fg:w="3"/><text x="70.9782%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.13%)</title><rect x="70.6921%" y="149" width="0.1262%" height="15" fill="rgb(213,46,41)" fg:x="3922" fg:w="7"/><text x="70.9421%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.04%)</title><rect x="70.7823%" y="133" width="0.0360%" height="15" fill="rgb(215,133,35)" fg:x="3927" fg:w="2"/><text x="71.0323%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.02%)</title><rect x="70.8183%" y="149" width="0.0180%" height="15" fill="rgb(213,28,5)" fg:x="3929" fg:w="1"/><text x="71.0683%" y="159.50"></text></g><g><title>biosim`biosim::landscape::LandCell::add_animals (46 samples, 0.83%)</title><rect x="70.4037%" y="165" width="0.8291%" height="15" fill="rgb(215,77,49)" fg:x="3906" fg:w="46"/><text x="70.6537%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.40%)</title><rect x="70.8363%" y="149" width="0.3965%" height="15" fill="rgb(248,100,22)" fg:x="3930" fg:w="22"/><text x="71.0863%" y="159.50"></text></g><g><title>biosim`random::default::Default::new (1 samples, 0.02%)</title><rect x="71.2329%" y="165" width="0.0180%" height="15" fill="rgb(208,67,9)" fg:x="3952" fg:w="1"/><text x="71.4829%" y="175.50"></text></g><g><title>libsystem_m.dylib`0x00007ff81e0f76e0 (594 samples, 10.71%)</title><rect x="71.2509%" y="165" width="10.7066%" height="15" fill="rgb(219,133,21)" fg:x="3953" fg:w="594"/><text x="71.5009%" y="175.50">libsystem_m.dyli..</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (12 samples, 0.22%)</title><rect x="81.9575%" y="165" width="0.2163%" height="15" fill="rgb(246,46,29)" fg:x="4547" fg:w="12"/><text x="82.2075%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="82.1738%" y="165" width="0.0180%" height="15" fill="rgb(246,185,52)" fg:x="4559" fg:w="1"/><text x="82.4238%" y="175.50"></text></g><g><title>biosim`biosim::landscape::LandCell::procreate (1,124 samples, 20.26%)</title><rect x="62.0043%" y="181" width="20.2596%" height="15" fill="rgb(252,136,11)" fg:x="3440" fg:w="1124"/><text x="62.2543%" y="191.50">biosim`biosim::landscape::LandCe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.07%)</title><rect x="82.1918%" y="165" width="0.0721%" height="15" fill="rgb(219,138,53)" fg:x="4560" fg:w="4"/><text x="82.4418%" y="175.50"></text></g><g><title>biosim`biosim::util::random_float (6 samples, 0.11%)</title><rect x="82.2639%" y="181" width="0.1081%" height="15" fill="rgb(211,51,23)" fg:x="4564" fg:w="6"/><text x="82.5139%" y="191.50"></text></g><g><title>biosim`core::hash::BuildHasher::hash_one (19 samples, 0.34%)</title><rect x="82.3720%" y="181" width="0.3425%" height="15" fill="rgb(247,221,28)" fg:x="4570" fg:w="19"/><text x="82.6220%" y="191.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (5 samples, 0.09%)</title><rect x="82.6244%" y="165" width="0.0901%" height="15" fill="rgb(251,222,45)" fg:x="4584" fg:w="5"/><text x="82.8744%" y="175.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (2 samples, 0.04%)</title><rect x="82.7145%" y="181" width="0.0360%" height="15" fill="rgb(217,162,53)" fg:x="4589" fg:w="2"/><text x="82.9645%" y="191.50"></text></g><g><title>biosim`core::hash::BuildHasher::hash_one (2 samples, 0.04%)</title><rect x="82.7866%" y="165" width="0.0360%" height="15" fill="rgb(229,93,14)" fg:x="4593" fg:w="2"/><text x="83.0366%" y="175.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (2 samples, 0.04%)</title><rect x="82.7866%" y="149" width="0.0360%" height="15" fill="rgb(209,67,49)" fg:x="4593" fg:w="2"/><text x="83.0366%" y="159.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.02%)</title><rect x="82.8226%" y="165" width="0.0180%" height="15" fill="rgb(213,87,29)" fg:x="4595" fg:w="1"/><text x="83.0726%" y="175.50"></text></g><g><title>biosim`core::hash::BuildHasher::hash_one (3 samples, 0.05%)</title><rect x="82.9668%" y="133" width="0.0541%" height="15" fill="rgb(205,151,52)" fg:x="4603" fg:w="3"/><text x="83.2168%" y="143.50"></text></g><g><title>biosim`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (2 samples, 0.04%)</title><rect x="82.9849%" y="117" width="0.0360%" height="15" fill="rgb(253,215,39)" fg:x="4604" fg:w="2"/><text x="83.2349%" y="127.50"></text></g><g><title>biosim`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.29%)</title><rect x="82.7505%" y="181" width="0.2884%" height="15" fill="rgb(221,220,41)" fg:x="4591" fg:w="16"/><text x="83.0005%" y="191.50"></text></g><g><title>biosim`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.20%)</title><rect x="82.8407%" y="165" width="0.1983%" height="15" fill="rgb(218,133,21)" fg:x="4596" fg:w="11"/><text x="83.0907%" y="175.50"></text></g><g><title>biosim`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.16%)</title><rect x="82.8767%" y="149" width="0.1622%" height="15" fill="rgb(221,193,43)" fg:x="4598" fg:w="9"/><text x="83.1267%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="83.0209%" y="133" width="0.0180%" height="15" fill="rgb(240,128,52)" fg:x="4606" fg:w="1"/><text x="83.2709%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="83.0209%" y="117" width="0.0180%" height="15" fill="rgb(253,114,12)" fg:x="4606" fg:w="1"/><text x="83.2709%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="83.0209%" y="101" width="0.0180%" height="15" fill="rgb(215,223,47)" fg:x="4606" fg:w="1"/><text x="83.2709%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="83.0389%" y="181" width="0.0180%" height="15" fill="rgb(248,225,23)" fg:x="4607" fg:w="1"/><text x="83.2889%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x00007ff81e0f76e0 (767 samples, 13.82%)</title><rect x="83.0570%" y="181" width="13.8248%" height="15" fill="rgb(250,108,0)" fg:x="4608" fg:w="767"/><text x="83.3070%" y="191.50">libsystem_m.dylib`0x0..</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (12 samples, 0.22%)</title><rect x="96.8818%" y="181" width="0.2163%" height="15" fill="rgb(228,208,7)" fg:x="5375" fg:w="12"/><text x="97.1318%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="97.0981%" y="181" width="0.0180%" height="15" fill="rgb(244,45,10)" fg:x="5387" fg:w="1"/><text x="97.3481%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.05%)</title><rect x="97.1161%" y="165" width="0.0541%" height="15" fill="rgb(207,125,25)" fg:x="5388" fg:w="3"/><text x="97.3661%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.07%)</title><rect x="97.1161%" y="181" width="0.0721%" height="15" fill="rgb(210,195,18)" fg:x="5388" fg:w="4"/><text x="97.3661%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="97.1702%" y="165" width="0.0180%" height="15" fill="rgb(249,80,12)" fg:x="5391" fg:w="1"/><text x="97.4202%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="97.1702%" y="149" width="0.0180%" height="15" fill="rgb(221,65,9)" fg:x="5391" fg:w="1"/><text x="97.4202%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="97.2242%" y="165" width="0.0180%" height="15" fill="rgb(235,49,36)" fg:x="5394" fg:w="1"/><text x="97.4742%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="97.2783%" y="149" width="0.0180%" height="15" fill="rgb(225,32,20)" fg:x="5397" fg:w="1"/><text x="97.5283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.13%)</title><rect x="97.1882%" y="181" width="0.1262%" height="15" fill="rgb(215,141,46)" fg:x="5392" fg:w="7"/><text x="97.4382%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.07%)</title><rect x="97.2422%" y="165" width="0.0721%" height="15" fill="rgb(250,160,47)" fg:x="5395" fg:w="4"/><text x="97.4922%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="97.2963%" y="149" width="0.0180%" height="15" fill="rgb(216,222,40)" fg:x="5398" fg:w="1"/><text x="97.5463%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="97.3143%" y="181" width="0.0180%" height="15" fill="rgb(234,217,39)" fg:x="5399" fg:w="1"/><text x="97.5643%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="97.3324%" y="181" width="0.0180%" height="15" fill="rgb(207,178,40)" fg:x="5400" fg:w="1"/><text x="97.5824%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.02%)</title><rect x="97.3324%" y="165" width="0.0180%" height="15" fill="rgb(221,136,13)" fg:x="5400" fg:w="1"/><text x="97.5824%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="97.3324%" y="149" width="0.0180%" height="15" fill="rgb(249,199,10)" fg:x="5400" fg:w="1"/><text x="97.5824%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.02%)</title><rect x="97.3504%" y="181" width="0.0180%" height="15" fill="rgb(249,222,13)" fg:x="5401" fg:w="1"/><text x="97.6004%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (7 samples, 0.13%)</title><rect x="97.3684%" y="181" width="0.1262%" height="15" fill="rgb(244,185,38)" fg:x="5402" fg:w="7"/><text x="97.6184%" y="191.50"></text></g><g><title>biosim`biosim::biosim::BioSim::run_year_cycle (5,512 samples, 99.35%)</title><rect x="0.0901%" y="197" width="99.3511%" height="15" fill="rgb(236,202,9)" fg:x="5" fg:w="5512"/><text x="0.3401%" y="207.50">biosim`biosim::biosim::BioSim::run_year_cycle</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (108 samples, 1.95%)</title><rect x="97.4946%" y="181" width="1.9466%" height="15" fill="rgb(250,229,37)" fg:x="5409" fg:w="108"/><text x="97.7446%" y="191.50">l..</text></g><g><title>biosim`biosim::util::landscape_from_repr (1 samples, 0.02%)</title><rect x="99.4412%" y="197" width="0.0180%" height="15" fill="rgb(206,174,23)" fg:x="5517" fg:w="1"/><text x="99.6912%" y="207.50"></text></g><g><title>biosim`&lt;biosim::landscape::AnimalCount as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="99.4593%" y="149" width="0.0180%" height="15" fill="rgb(211,33,43)" fg:x="5518" fg:w="1"/><text x="99.7093%" y="159.50"></text></g><g><title>biosim`core::fmt::builders::DebugStruct::field (1 samples, 0.02%)</title><rect x="99.4593%" y="133" width="0.0180%" height="15" fill="rgb(245,58,50)" fg:x="5518" fg:w="1"/><text x="99.7093%" y="143.50"></text></g><g><title>biosim`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.02%)</title><rect x="99.4593%" y="117" width="0.0180%" height="15" fill="rgb(244,68,36)" fg:x="5518" fg:w="1"/><text x="99.7093%" y="127.50"></text></g><g><title>biosim`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="99.4593%" y="101" width="0.0180%" height="15" fill="rgb(232,229,15)" fg:x="5518" fg:w="1"/><text x="99.7093%" y="111.50"></text></g><g><title>biosim`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="99.4593%" y="85" width="0.0180%" height="15" fill="rgb(254,30,23)" fg:x="5518" fg:w="1"/><text x="99.7093%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="99.4593%" y="69" width="0.0180%" height="15" fill="rgb(235,160,14)" fg:x="5518" fg:w="1"/><text x="99.7093%" y="79.50"></text></g><g><title>biosim`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="99.4773%" y="117" width="0.0180%" height="15" fill="rgb(212,155,44)" fg:x="5519" fg:w="1"/><text x="99.7273%" y="127.50"></text></g><g><title>biosim`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.02%)</title><rect x="99.4953%" y="117" width="0.0180%" height="15" fill="rgb(226,2,50)" fg:x="5520" fg:w="1"/><text x="99.7453%" y="127.50"></text></g><g><title>biosim`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.07%)</title><rect x="99.4773%" y="149" width="0.0721%" height="15" fill="rgb(234,177,6)" fg:x="5519" fg:w="4"/><text x="99.7273%" y="159.50"></text></g><g><title>biosim`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.07%)</title><rect x="99.4773%" y="133" width="0.0721%" height="15" fill="rgb(217,24,9)" fg:x="5519" fg:w="4"/><text x="99.7273%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.04%)</title><rect x="99.5133%" y="117" width="0.0360%" height="15" fill="rgb(220,13,46)" fg:x="5521" fg:w="2"/><text x="99.7633%" y="127.50"></text></g><g><title>biosim`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (6 samples, 0.11%)</title><rect x="99.4593%" y="181" width="0.1081%" height="15" fill="rgb(239,221,27)" fg:x="5518" fg:w="6"/><text x="99.7093%" y="191.50"></text></g><g><title>biosim`core::fmt::write (6 samples, 0.11%)</title><rect x="99.4593%" y="165" width="0.1081%" height="15" fill="rgb(222,198,25)" fg:x="5518" fg:w="6"/><text x="99.7093%" y="175.50"></text></g><g><title>biosim`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.02%)</title><rect x="99.5494%" y="149" width="0.0180%" height="15" fill="rgb(211,99,13)" fg:x="5523" fg:w="1"/><text x="99.7994%" y="159.50"></text></g><g><title>biosim`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="99.5494%" y="133" width="0.0180%" height="15" fill="rgb(232,111,31)" fg:x="5523" fg:w="1"/><text x="99.7994%" y="143.50"></text></g><g><title>biosim`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="99.5494%" y="117" width="0.0180%" height="15" fill="rgb(245,82,37)" fg:x="5523" fg:w="1"/><text x="99.7994%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="99.5494%" y="101" width="0.0180%" height="15" fill="rgb(227,149,46)" fg:x="5523" fg:w="1"/><text x="99.7994%" y="111.50"></text></g><g><title>biosim`std::io::stdio::_print (7 samples, 0.13%)</title><rect x="99.4593%" y="197" width="0.1262%" height="15" fill="rgb(218,36,50)" fg:x="5518" fg:w="7"/><text x="99.7093%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="99.5674%" y="181" width="0.0180%" height="15" fill="rgb(226,80,48)" fg:x="5524" fg:w="1"/><text x="99.8174%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="99.5854%" y="197" width="0.0360%" height="15" fill="rgb(238,224,15)" fg:x="5525" fg:w="2"/><text x="99.8354%" y="207.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (7 samples, 0.13%)</title><rect x="99.6215%" y="197" width="0.1262%" height="15" fill="rgb(241,136,10)" fg:x="5527" fg:w="7"/><text x="99.8715%" y="207.50"></text></g><g><title>biosim`main (5,546 samples, 99.96%)</title><rect x="0.0000%" y="277" width="99.9640%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="5546"/><text x="0.2500%" y="287.50">biosim`main</text></g><g><title>biosim`std::rt::lang_start_internal (5,546 samples, 99.96%)</title><rect x="0.0000%" y="261" width="99.9640%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="5546"/><text x="0.2500%" y="271.50">biosim`std::rt::lang_start_internal</text></g><g><title>biosim`std::rt::lang_start::_{{closure}} (5,546 samples, 99.96%)</title><rect x="0.0000%" y="245" width="99.9640%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="5546"/><text x="0.2500%" y="255.50">biosim`std::rt::lang_start::_{{closure}}</text></g><g><title>biosim`std::sys_common::backtrace::__rust_begin_short_backtrace (5,546 samples, 99.96%)</title><rect x="0.0000%" y="229" width="99.9640%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="5546"/><text x="0.2500%" y="239.50">biosim`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>biosim`biosim::main (5,546 samples, 99.96%)</title><rect x="0.0000%" y="213" width="99.9640%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="5546"/><text x="0.2500%" y="223.50">biosim`biosim::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.22%)</title><rect x="99.7477%" y="197" width="0.2163%" height="15" fill="rgb(234,36,40)" fg:x="5534" fg:w="12"/><text x="99.9977%" y="207.50"></text></g><g><title>all (5,548 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="5548"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (5,548 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(210,75,36)" fg:x="0" fg:w="5548"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (2 samples, 0.04%)</title><rect x="99.9640%" y="277" width="0.0360%" height="15" fill="rgb(229,88,21)" fg:x="5546" fg:w="2"/><text x="100.2140%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.04%)</title><rect x="99.9640%" y="261" width="0.0360%" height="15" fill="rgb(252,204,47)" fg:x="5546" fg:w="2"/><text x="100.2140%" y="271.50"></text></g></svg></svg>